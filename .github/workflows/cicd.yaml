name: CI
on:
  push:
    branches: ["main"]
    tags:
      - "v*"
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      version_increment:
        description: "Version increment type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: cli # Changed to match your actual binary name
  # Add OpenSSL environment variables
  OPENSSL_DIR: /usr/lib/ssl
  OPENSSL_LIB_DIR: /usr/lib/x86_64-linux-gnu
  OPENSSL_INCLUDE_DIR: /usr/include/openssl
jobs:
  version:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.tag_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Setup Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Get Current Version
        id: current_version
        run: |
          # Check version from the cli/Cargo.toml
          CURRENT_VERSION=$(grep -m 1 "version" cli/Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Bump Version
        id: bump_version
        uses: actions-ecosystem/action-bump-semver@v1
        with:
          current_version: ${{ steps.current_version.outputs.current_version }}
          level: ${{ github.event.inputs.version_increment }}

      - name: Update Cargo.toml Files
        run: |
          NEW_VERSION=${{ steps.bump_version.outputs.new_version }}
          # Update both crates to the same version
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" cli/Cargo.toml
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" core/Cargo.toml
          # Update Tauri app version if it exists
          if [ -f app/src-tauri/Cargo.toml ]; then
            sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" app/src-tauri/Cargo.toml
            sed -i "s/\"version\": \".*\"/\"version\": \"$NEW_VERSION\"/" app/src-tauri/tauri.conf.json
            echo "Updated app/src-tauri/Cargo.toml and tauri.conf.json to version $NEW_VERSION"
          fi
          echo "Updated Cargo.toml files to version $NEW_VERSION"

      - name: Update install-cli.sh Version
        run: |
          NEW_VERSION=${{ steps.bump_version.outputs.new_version }}
          if [ -f install-cli.sh ]; then
            sed -i "s/^VERSION=\".*\"/VERSION=\"$NEW_VERSION\"/" install-cli.sh
            echo "Updated install-cli.sh to version $NEW_VERSION"
          else
            echo "Warning: install-cli.sh not found, skipping version update"
          fi

      - name: Commit and Push Changes
        run: |
          git add cli/Cargo.toml core/Cargo.toml
          if [ -f install-cli.sh ]; then
            git add install-cli.sh
          fi
          if [ -f app/src-tauri/Cargo.toml ]; then
            git add app/src-tauri/Cargo.toml app/src-tauri/tauri.conf.json
          fi
          git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }}"
          git push origin main

      - name: Tag Version
        id: tag_version
        run: |
          NEW_VERSION=${{ steps.bump_version.outputs.new_version }}
          git tag -a "v$NEW_VERSION" -m "v$NEW_VERSION"
          git push origin "v$NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Tagged version: v$NEW_VERSION"

  build:
    needs: [version]
    if: always() && (github.event_name != 'workflow_dispatch' || needs.version.result == 'success')
    strategy:
      matrix:
        include:
          # Linux x86_64 targets with older GLIBC compatibility
          - os: ubuntu-20.04
            rust-version: stable
            target: x86_64-unknown-linux-gnu
            artifact-name: linux-x86_64
          # Static Linux build (no GLIBC dependency)
          - os: ubuntu-latest
            rust-version: stable
            target: x86_64-unknown-linux-musl
            artifact-name: linux-x86_64-musl
          # macOS Silicon (ARM64) targets
          - os: macos-latest
            rust-version: stable
            target: aarch64-apple-darwin
            artifact-name: macos-silicon
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && format('refs/tags/v{0}', needs.version.outputs.new_version) || '' }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Install OpenSSL for Linux builds
      - name: Install OpenSSL (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      # Install OpenSSL for musl target
      - name: Install musl-tools and OpenSSL for musl
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools musl-dev
          # Install statically compiled OpenSSL for musl
          sudo apt-get install -y libssl-dev pkg-config

      # Handle OpenSSL for macOS
      - name: Install OpenSSL (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "Adding homebrew openssl to PKG_CONFIG_PATH"
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v1-rust"
          shared-key: "build-${{ matrix.target }}"

      - name: Build Release
        run: |
          # Navigate to cli directory and build
          cd cli
          cargo build --target ${{ matrix.target }} --release --verbose

      - name: Prepare Artifact
        run: |
          mkdir -p artifacts
          # Rename binary to vprs3bkp for release
          cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }} artifacts/vprs3bkp-${{ matrix.artifact-name }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: artifacts/vprs3bkp-${{ matrix.artifact-name }}
          retention-days: 7

  release:
    needs: [build, version]
    if: github.event_name == 'workflow_dispatch' && needs.version.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Prepare Release Files
        run: |
          mkdir -p release-artifacts
          find dist -type f -name "*" -exec cp {} release-artifacts/ \;
          find dist -type d -name "*.app" -exec cp -r {} release-artifacts/ \;
          ls -la release-artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version.outputs.new_version }}
          name: "Release v${{ needs.version.outputs.new_version }}"
          body: "Release of version ${{ needs.version.outputs.new_version }}"
          files: release-artifacts/*
          generate_release_notes: true
          draft: false
          prerelease: false
