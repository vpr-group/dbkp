name: Rust CI with Auto-Versioning
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      version_increment:
        description: "Version increment type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: vprs3bkp

jobs:
  version:
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.tag_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Get Current Version
        id: current_version
        run: |
          CURRENT_VERSION=$(grep -m 1 "version" Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Bump Version
        id: bump_version
        uses: actions-ecosystem/action-bump-semver@v1
        with:
          current_version: ${{ steps.current_version.outputs.current_version }}
          level: ${{ github.event.inputs.version_increment }}

      - name: Update Cargo.toml
        run: |
          NEW_VERSION=${{ steps.bump_version.outputs.new_version }}
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml
          echo "Updated Cargo.toml to version $NEW_VERSION"

      - name: Commit and Push
        run: |
          git add Cargo.toml
          git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }}"
          git push

      - name: Tag Version
        id: tag_version
        run: |
          NEW_VERSION=${{ steps.bump_version.outputs.new_version }}
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push --tags
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

  build:
    needs: [version]
    if: always() && (github.event_name != 'workflow_dispatch' || needs.version.result == 'success')
    strategy:
      matrix:
        include:
          # Linux x86_64 targets
          - os: ubuntu-latest
            rust-version: stable
            target: x86_64-unknown-linux-gnu
            artifact-name: linux-x86_64
          # macOS Silicon (ARM64) targets
          - os: macos-latest
            rust-version: stable
            target: aarch64-apple-darwin
            artifact-name: macos-silicon
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && format('refs/tags/v{0}', needs.version.outputs.new_version) || '' }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Add target
        run: rustup target add ${{ matrix.target }}

      - name: Build Release
        run: cargo build --target ${{ matrix.target }} --release --verbose

      - name: Prepare Artifact
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }} artifacts/${{ env.BINARY_NAME }}-${{ matrix.artifact-name }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: artifacts/${{ env.BINARY_NAME }}-${{ matrix.artifact-name }}
          retention-days: 7

  release:
    needs: [build]
    if: github.event_name == 'workflow_dispatch' && needs.version.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Prepare Release Files
        run: |
          mkdir -p release-artifacts
          find dist -type f -name "*" -exec cp {} release-artifacts/ \;
          ls -la release-artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version.outputs.new_version }}
          files: release-artifacts/*
          generate_release_notes: true
          draft: false
          prerelease: false
